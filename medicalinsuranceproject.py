# -*- coding: utf-8 -*-
"""MedicalInsuranceProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tGt9TIcmwnHaDvz4KIRmh6EIjwPMbUWe

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""DataCollection&Analysis

"""

#loading the datafile from CSV file to Pandas DataFrame
insurance_dataset = pd.read_csv('/content/insurance.csv')

#First 5 rows of the data frame
insurance_dataset.head()

"""Training machine learning model"""

#Number of rows and columns
insurance_dataset.shape

#getting some informations about data set
insurance_dataset.info()

"""Categorical Features :
Sex
Smoker
Region 

"""

#Checking for missing values
insurance_dataset.isnull().sum()

"""DataAnalysis"""

#statistical measures of data set
insurance_dataset.describe()

#distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

"""For categorical values we will use count plot"""

# Gender column 
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

#BMI Distribution
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI Distribution')
plt.show()

#children column
plt.figure(figsize=(6,6))
sns.countplot(x='children',data=insurance_dataset)
#sns.distplot(insurance_dataset['children'])
plt.title('Children Distribution')
plt.show()

insurance_dataset['children'].value_counts()

#smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=insurance_dataset)
plt.title('Smoker Distribution')
plt.show()

insurance_dataset['smoker'].value_counts()

plt.figure(figsize=(6,6))
sns.countplot(x='region',data=insurance_dataset)
plt.title('Region Distribution')
plt.show()

insurance_dataset['region'].value_counts()

sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['charges'])
plt.title('Charges Distribution')
plt.show()

"""Data Pre-Processing

As computer does not understand text values,we are converting into numeric values->this process is called as encoding the categorical features
"""

#encoding sex column
#insurance_dataset.replace({'sex':{'male':0,'female':1}},inplace=True)

#encoding smoker column
#insurance_dataset.replace({'smoker':{'yes':0,'no':1}},inplace=True)

#encoding region column
#insurance_dataset.replace({'region':{'southease':0,'southwest':1,'northeast':2,'northwest':3}})
#insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)

#insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)
#insurance_dataset['sex'].replace([Female,Male],['0','1'],inplace=True)
#insurance_dataset['sex'].replace([0,1],['Female','Male'],inplace=True)
#insurance_dataset.head()

insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)

3 # encoding 'smoker' column
insurance_dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

# encoding 'region' column
insurance_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

"""Splitting Features and Target"""

X=insurance_dataset.drop(columns='charges',axis=1)
Y=insurance_dataset['charges']

print(X)

print(Y)

"""Splitting data into training and testing data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training
Linear Regression
"""

#Loading the linear Regression model
regressor = LinearRegression()

regressor.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on training data
training_data_prediction = regressor.predict(X_train)

#R squared value
r2_train = metrics.r2_score(Y_train,training_data_prediction)
print('R squared value :',r2_train)

#prediction on testing data
testing_data_prediction = regressor.predict(X_test)

#R squared value
r2_test = metrics.r2_score(Y_test,testing_data_prediction)
print('R squared value :', r2_test)

"""Building a Predictive system"""

input_data = (31,1,25.74,0,1,0)
# Changing input data(which is as tuple to numpy array)
input_data_as_numpy_array = np.asarray(input_data)
# reshape the array
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)
#prediction = regressor.predict(input_data_reshape)
prediction = regressor.predict(input_data_reshape)
print(prediction)
print('The insurance cost is USD:',prediction[0])

